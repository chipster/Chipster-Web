{
  "microarray": {
    "Normalisation": [
      {
        "name": "Affymetrix",
        "tool": "norm-affy.R"
      },
      {
        "name": "Affymetrix exon arrays",
        "tool": "norm-affy-exon.R"
      },
      {
        "name": "Affymetrix gene arrays",
        "tool": "norm-affy-gene.R"
      },
      {
        "name": "Affymetrix SNP arrays",
        "tool": "norm-affy-snp.R"
      },
      {
        "name": "Agilent 1-color",
        "tool": "norm-agilent-one-color.R"
      },
      {
        "name": "Agilent 2-color",
        "tool": "norm-agilent.R"
      },
      {
        "name": "Agilent miRNA",
        "tool": "norm-agilent-miRNA.R"
      },
      {
        "name": "cDNA",
        "tool": "norm-cdna.R"
      },
      {
        "name": "Illumina",
        "tool": "norm-illumina.R"
      },
      {
        "name": "Illumina with normexp background correction",
        "tool": "norm-illumina-backgroundcorr.R"
      },
      {
        "name": "Illumina - lumi pipeline",
        "tool": "norm-illumina-lumi.R"
      },
      {
        "name": "Illumina - methylumi pipeline",
        "tool": "norm-illumina-methylumi.R"
      },
      {
        "name": "Illumina SNP arrays",
        "tool": "norm-illumina-SNP.R"
      },
      {
        "name": "Process prenormalized",
        "tool": "norm-prenormalized.R"
      },
      {
        "name": "Process prenormalized affy",
        "tool": "norm-prenormalized-affy.R"
      },
      {
        "name": "Random effects",
        "tool": "norm-lme.R"
      },
      {
        "name": "ComBat - batch normalisation",
        "tool": "norm-combat.R"
      },
      {
        "name": "Normalize to chip average",
        "tool": "norm-chip-average.R"
      },
      {
        "name": "Normalize to gene average",
        "tool": "norm-gene-average.R"
      },
      {
        "name": "Normalize to specific samples",
        "tool": "norm-specific-samples.R"
      },
      {
        "name": "Normalize to specific genes",
        "tool": "norm-specific-genes.R"
      }
    ],
    "Utilities": [
      {
        "name": "Search by correlation",
        "tool": "search-correlation.R"
      },
      {
        "name": "Search by gene name",
        "tool": "search-queryword.R"
      },
      {
        "name": "Search by genomic coordinates",
        "tool": "search-coordinates.R"
      },
      {
        "name": "Merge tables",
        "tool": "merge-tables.R"
      },
      {
        "name": "Merge data sets",
        "tool": "merge-datasets.R"
      },
      {
        "name": "Merge expression and phenodata",
        "tool": "merge-pheno-and-data.R"
      },
      {
        "name": "Extract genes from clustering",
        "tool": "extract-genes-from-clustering.R"
      },
      {
        "name": "Extract genes from GO term",
        "tool": "extract-genes-from-go.R"
      },
      {
        "name": "Extract genes from KEGG pathway",
        "tool": "extract-genes-from-kegg.R"
      },
      {
        "name": "Extract samples from table",
        "tool": "extract-samples-from-dataset.R"
      },
      {
        "name": "Extract genes using a p-value",
        "tool": "extract-genes-from-stattest.R"
      },
      {
        "name": "Extract genes",
        "tool": "extract-genes.R"
      },
      {
        "name": "Calculate fold change",
        "tool": "calculate-fold-change.R"
      },
      {
        "name": "Average replicate chips",
        "tool": "average-replicates.R"
      },
      {
        "name": "Combine probes to genes",
        "tool": "combine-probes-to-genes.R"
      },
      {
        "name": "Change interpretation",
        "tool": "change-interpretation.R"
      },
      {
        "name": "Generate phenodata",
        "tool": "generate-phenodata.R"
      },
      {
        "name": "Delete columns",
        "tool": "delete-columns.R"
      },
      {
        "name": "Delete and subtract columns",
        "tool": "delete-and-subtract-columns.R"
      },
      {
        "name": "Calculate descriptive statistics",
        "tool": "calculate-descriptive-statistics.R"
      },
      {
        "name": "Sort samples",
        "tool": "sort-samples.R"
      },
      {
        "name": "Sort genes",
        "tool": "sort-genes.R"
      },
      {
        "name": "Random sampling",
        "tool": "sampling.R"
      },
      {
        "name": "Export tab2mage format",
        "tool": "export-tab2mage.R"
      },
      {
        "name": "Export GEO's SOFT format",
        "tool": "export-soft.R"
      },
      {
        "name": "Import from GEO",
        "tool": "import-soft2.R"
      },
      {
        "name": "Import from ArrayExpress",
        "tool": "import-ArrayExpress.R"
      },
      {
        "name": "Intersect lists",
        "tool": "intersect-lists.R"
      },
      {
        "name": "Output test",
        "tool": "output_test.R"
      },
      {
        "name": "Join tables",
        "tool": "join_tsv_files.R"
      }
    ],
    "Preprocessing": [
      {
        "name": "Filter by expression",
        "tool": "filter-expression.R"
      },
      {
        "name": "Filter by flags",
        "tool": "filter-flags.R"
      },
      {
        "name": "Filter by standard deviation",
        "tool": "filter-sd.R"
      },
      {
        "name": "Filter by interquartile range",
        "tool": "filter-iqr.R"
      },
      {
        "name": "Filter by coefficient of variation",
        "tool": "filter-cv.R"
      },
      {
        "name": "Filter using a column term",
        "tool": "filter-by-column-term.R"
      },
      {
        "name": "Filter using a column value",
        "tool": "filter-by-column-value.R"
      },
      {
        "name": "Impute missing values",
        "tool": "impute.R"
      },
      {
        "name": "Remove missing values",
        "tool": "na-omitted.R"
      },
      {
        "name": "Dichotomize continuous data",
        "tool": "dichotomize-continious-data.R"
      }
    ],
    "Pathways": [
      {
        "name": "Hypergeometric test for GO",
        "tool": "stat-hyperG-GO.R"
      },
      {
        "name": "Hypergeometric test for KEGG or PFAM",
        "tool": "stat-hyperG-KEGG-PFAM.R"
      },
      {
        "name": "SAFE test for KEGG pathway enrichment",
        "tool": "stat-hyperG-safe.R"
      },
      {
        "name": "Hypergeometric test for cytobands",
        "tool": "stat-hyperG-cytoband.R"
      },
      {
        "name": "Gene set test",
        "tool": "stat-geneset.R"
      },
      {
        "name": "GO enrichment for miRNA targets",
        "tool": "pathways-mirna-hyperg-go.R"
      },
      {
        "name": "KEGG enrichment for miRNA targets",
        "tool": "pathways-mirna-hyperg-kegg.R"
      },
      {
        "name": "Hypergeometric test for ConsensusPathDB",
        "tool": "annotate-cpdb.py"
      }
    ],
    "Copy number aberrations": [
      {
        "name": "Import from GEO",
        "tool": "import-soft2.R"
      },
      {
        "name": "Import from CanGEM",
        "tool": "acgh-import-from-cangem.R"
      },
      {
        "name": "Normalize copy number data",
        "tool": "acgh-normalize.R"
      },
      {
        "name": "Plot copy number profiles",
        "tool": "acgh-plot-profile.R"
      },
      {
        "name": "Smooth waves from normalized aCGH data",
        "tool": "acgh-smooth.R"
      },
      {
        "name": "Segment copy number data",
        "tool": "acgh-segment.R"
      },
      {
        "name": "Call aberrations from segmented copy number data",
        "tool": "acgh-call-aberrations.R"
      },
      {
        "name": "Identify common regions from called copy number data",
        "tool": "acgh-identify-regions.R"
      },
      {
        "name": "Add cytogenetic bands",
        "tool": "acgh-add-cytobands.R"
      },
      {
        "name": "Count overlapping CNVs",
        "tool": "acgh-count-overlapping-cnvs.R"
      },
      {
        "name": "Plot copy number aberration frequencies",
        "tool": "acgh-plot-frequencies.R"
      },
      {
        "name": "Count the number of aberrations per sample",
        "tool": "cna-count-aberrations.R"
      },
      {
        "name": "Cluster called copy number data",
        "tool": "acgh-cluster.R"
      },
      {
        "name": "Plot correlations of called copy number data",
        "tool": "cna-correlate.R"
      },
      {
        "name": "Group tests for called copy number data",
        "tool": "acgh-group-test.R"
      },
      {
        "name": "Survival test for called copy number data",
        "tool": "acgh-survival-test.R"
      },
      {
        "name": "Plot survival curves for called copy number data",
        "tool": "acgh-plot-survival.R"
      },
      {
        "name": "Fuse regions by column value",
        "tool": "cna-fuse-regions-by-column.R"
      },
      {
        "name": "Fuse regions manually",
        "tool": "cna-fuse-regions-manually.R"
      },
      {
        "name": "Detect genes from called copy number data",
        "tool": "acgh-convert-from-probes-to-genes.R"
      },
      {
        "name": "GO enrichment for called gene copy numbers",
        "tool": "acgh-pathways-go.R"
      },
      {
        "name": "Match copy number and expression features",
        "tool": "acgh-match-probes.R"
      },
      {
        "name": "Plot profiles of matched copy number and expression",
        "tool": "acgh-plot-combined-profile.R"
      },
      {
        "name": "Test for copy-number-induced expression changes",
        "tool": "acgh-expression-test.R"
      },
      {
        "name": "Plot copy-number-induced gene expression",
        "tool": "acgh-plot-combined-expression.R"
      },
      {
        "name": "Fetch probe positions from GEO",
        "tool": "acgh-fetch-probe-positions-from-geo.R"
      },
      {
        "name": "Fetch probe positions from CanGEM",
        "tool": "acgh-fetch-probe-positions-from-cangem.R"
      }
    ],
    "Quality control": [
      {
        "name": "Affymetrix basic",
        "tool": "qc-affy.R"
      },
      {
        "name": "Affymetrix - using RLE and NUSE",
        "tool": "qc-affy-rle-nuse.R"
      },
      {
        "name": "Affymetrix exon/gene arrays - using RLE and NUSE",
        "tool": "qc-affy-exon-rle-nuse.R"
      },
      {
        "name": "Illumina",
        "tool": "qc-illumina.R"
      },
      {
        "name": "Agilent 2-color",
        "tool": "qc-agilent.R"
      },
      {
        "name": "Agilent 1-color",
        "tool": "qc-agilent-one-color.R"
      },
      {
        "name": "cDNA",
        "tool": "qc-cdna.R"
      }
    ],
    "Visualisation": [
      {
        "name": "Idiogram",
        "tool": "plot-idiogram.R"
      },
      {
        "name": "Chromosomal position",
        "tool": "plot-chrom-pos.R"
      },
      {
        "name": "Volcano plot",
        "tool": "plot-volcano.R"
      },
      {
        "name": "Volcano plot from existing results",
        "tool": "plot-volcano-data-exists.R"
      },
      {
        "name": "Boxplot",
        "tool": "plot-boxplot.R"
      },
      {
        "name": "Dendrogram",
        "tool": "plot-dendrogram.R"
      },
      {
        "name": "Histogram",
        "tool": "plot-histogram.R"
      },
      {
        "name": "Correlogram",
        "tool": "plot-corrgram.R"
      },
      {
        "name": "Heatmap",
        "tool": "plot-heatmap.R"
      },
      {
        "name": "Annotated heatmap",
        "tool": "plot-annoheatmap.R"
      }
    ],
    "Clustering": [
      {
        "name": "KNN classification",
        "tool": "classification-knn.R"
      },
      {
        "name": "Hierarchical",
        "tool": "cluster-hierarchical.R"
      },
      {
        "name": "K-Means",
        "tool": "cluster-kmeans.R"
      },
      {
        "name": "K-Means - estimate K",
        "tool": "cluster-kmeans-testK.R"
      },
      {
        "name": "Quality Threshold (QT)",
        "tool": "cluster-qt.R"
      },
      {
        "name": "Self-organizing map (SOM)",
        "tool": "cluster-som.R"
      },
      {
        "name": "Classification",
        "tool": "classification.R"
      }
    ],
    "Statistics": [
      {
        "name": "One sample tests",
        "tool": "stat-one-group.R"
      },
      {
        "name": "Two groups tests",
        "tool": "stat-two-groups.R"
      },
      {
        "name": "ROTS",
        "tool": "stat-ROTS.R"
      },
      {
        "name": "SAM",
        "tool": "stat-sam.R"
      },
      {
        "name": "Several groups tests",
        "tool": "stat-several-groups.R"
      },
      {
        "name": "Linear modelling",
        "tool": "stat-linear-modelling.R"
      },
      {
        "name": "Linear modelling using user-defined design matrix",
        "tool": "stat-linear-modelling-designmat.R"
      },
      {
        "name": "Test proportions",
        "tool": "stat-proportions.R"
      },
      {
        "name": "Correlate with phenodata",
        "tool": "stat-correlate-with-phenodata.R"
      },
      {
        "name": "Correlate miRNA with target expression",
        "tool": "correlation-analysis-mirna.R"
      },
      {
        "name": "Time series",
        "tool": "stat-timeseries.R"
      },
      {
        "name": "Association analysis",
        "tool": "stat-chisq-snp.R"
      },
      {
        "name": "Adjust p-values",
        "tool": "stat-adjust-pvalues.R"
      },
      {
        "name": "PCA",
        "tool": "ordination-pca.R"
      },
      {
        "name": "DCA",
        "tool": "ordination-ca.R"
      },
      {
        "name": "NMDS",
        "tool": "ordination-nmds.R"
      },
      {
        "name": "Sample size estimation",
        "tool": "estimate-samplesize.R"
      },
      {
        "name": "Sample size calculations with an adapted BH method",
        "tool": "sample-size-with-bh.R"
      },
      {
        "name": "Up-down analysis of miRNA targets",
        "tool": "up-down-analysis-mirna.R"
      }
    ],
    "Promoter analysis": [
      {
        "name": "Weeder",
        "tool": "promoter-tfbs.R"
      },
      {
        "name": "Retrieve promoters",
        "tool": "promoter-retrprom.R"
      }
    ],
    "Annotation": [
      {
        "name": "Agilent, Affymetrix or Illumina genelist",
        "tool": "annotate-genelist2html.R"
      },
      {
        "name": "Add annotations to data",
        "tool": "annotate-add-to-data.R"
      },
      {
        "name": "Add genomic location to data",
        "tool": "add-locations-to-data.R"
      },
      {
        "name": "Find miRNA targets",
        "tool": "annotate-miRNA-targets.R"
      },
      {
        "name": "miRNA annotations",
        "tool": "annotate-agilent-miRNA.R"
      }
    ]
  },
  "internal": {},
  "ngs": {
    "Variants": [
      {
        "name": "Call SNPs and short INDELs",
        "tool": "samtools-snp-indel-single.R"
      },
      {
        "name": "Filter and analyse variants",
        "tool": "vcftools.R"
      },
      {
        "name": "Annotate variants",
        "tool": "annotate-variant.R"
      }
    ],
    "Metagenomics": [
      {
        "name": "Extract sequences from a SFF file",
        "tool": "mothur-sffinfo.R"
      },
      {
        "name": "Merge FASTA or QUAL files",
        "tool": "merge-fasta-qual.R"
      },
      {
        "name": "Summarize sequences with Mothur",
        "tool": "mothur-summaryseqs.R"
      },
      {
        "name": "Trim and filter sequences with Mothur",
        "tool": "mothur-trimseqs-uniqueseqs.R"
      },
      {
        "name": "Align sequences with Mothur",
        "tool": "mothur-alignseqs.R"
      },
      {
        "name": "Filter sequence alignment with Mothur",
        "tool": "mothur-filterseqs.R"
      },
      {
        "name": "Extract unique aligned sequences with Mothur",
        "tool": "mothur-uniqueseqs.R"
      },
      {
        "name": "Precluster aligned sequences with Mothur",
        "tool": "mothur-precluster.R"
      },
      {
        "name": "Remove chimeric sequences with Mothur",
        "tool": "mothur-chimera-uchime.R"
      },
      {
        "name": "Classify sequences to taxonomic units with Mothur",
        "tool": "mothur-classifyseqs.R"
      },
      {
        "name": "Statistical analysis for marker gene studies",
        "tool": "mothur-analyses.R"
      }
    ],
    "Utilities": [
      {
        "name": "Define NGS experiment",
        "tool": "ngs-create-experiment.R"
      },
      {
        "name": "Filter table by column term",
        "tool": "ngs-filter-annotations.R"
      },
      {
        "name": "Filter table by column value",
        "tool": "ngs-filter-results-column.R"
      },
      {
        "name": "Filter BED by column value",
        "tool": "filter-bed-value.R"
      },
      {
        "name": "Extract samples from table",
        "tool": "extract-samples-from-dataset.R"
      },
      {
        "name": "Table converter",
        "tool": "select_columns.R"
      },
      {
        "name": "Sort table by column",
        "tool": "sort_and_select_columns.R"
      },
      {
        "name": "Join tables",
        "tool": "join_tsv_files.R"
      },
      {
        "name": "Preprocess count table",
        "tool": "process-preprocessed-counts.R"
      },
      {
        "name": "Normalise count table",
        "tool": "normalise-counts.R"
      },
      {
        "name": "Annotate Ensembl identifiers",
        "tool": "annotate-ensembl-ids.R"
      },
      {
        "name": "Plot normalized counts for a gene",
        "tool": "deseq2-normalized-counts-for-gene.R"
      },
      {
        "name": "A5 assembly pipeline for microbial genomes",
        "tool": "a5-miseq.R"
      },
      {
        "name": "Index BAM",
        "tool": "samtools-index.R"
      },
      {
        "name": "Sort and index BAM",
        "tool": "samtools-sort-index-BAM.R"
      },
      {
        "name": "Convert SAM to BAM, sort and index",
        "tool": "samtools-convert-SAMtoBAM-sort-index.R"
      },
      {
        "name": "Make a subset of BAM",
        "tool": "samtools-subset.R"
      },
      {
        "name": "Merge BAM",
        "tool": "samtools-merge.R"
      },
      {
        "name": "Statistics for BAM",
        "tool": "samtools-idxstats.R"
      },
      {
        "name": "Count alignments in BAM",
        "tool": "samtools-count.R"
      },
      {
        "name": "Remove duplicate reads from BAM",
        "tool": "samtools-rmdup.R"
      },
      {
        "name": "Create consensus sequence from BAM",
        "tool": "samtools-consensus.R"
      },
      {
        "name": "Index FASTA",
        "tool": "samtools-index-fasta.R"
      },
      {
        "name": "Retrieve unique alignments from BAM",
        "tool": "unique-alignments-from-bam.R"
      },
      {
        "name": "Convert BAM to BED",
        "tool": "bedtools-bamtobed.R"
      },
      {
        "name": "Convert FASTQ to FASTA",
        "tool": "fastx-fastq-to-fasta.R"
      },
      {
        "name": "Make a subset of FASTQ",
        "tool": "subset-fastq.R"
      },
      {
        "name": "Sort BED",
        "tool": "SortBed.java"
      },
      {
        "name": "Sort GTF",
        "tool": "SortGtf.java"
      },
      {
        "name": "Sort TSV",
        "tool": "SortTsv.java"
      },
      {
        "name": "Sort VCF",
        "tool": "SortVcf.java"
      },
      {
        "name": "Extract features from BED",
        "tool": "extract-features-from-BED.R"
      },
      {
        "name": "FASTA from BED",
        "tool": "bedtools-fastafrombed.R"
      },
      {
        "name": "Rename reads",
        "tool": "fastx-renamer.R"
      },
      {
        "name": "Remove duplicate reads from FASTQ",
        "tool": "fastx-collapser.R"
      },
      {
        "name": "Download file",
        "tool": "DownloadFile.java"
      },
      {
        "name": "Extract .tar.gz file",
        "tool": "extract_gzip_tar.py"
      },
      {
        "name": "Extract .gz file",
        "tool": "gunzip.py"
      },
      {
        "name": "Test data input",
        "tool": "test-data-in.R"
      },
      {
        "name": "Test data input and output in R",
        "tool": "test-data-in-out.R"
      },
      {
        "name": "Test data input and output in Python",
        "tool": "test-data-in-out.py"
      },
      {
        "name": "Download file",
        "tool": "DownloadFile.java"
      }
    ],
    "Alignment": [
      {
        "name": "Bowtie2 for single end reads",
        "tool": "bowtie2.R"
      },
      {
        "name": "Bowtie2 for paired end reads",
        "tool": "bowtie2-paired-end.R"
      },
      {
        "name": "Bowtie2 for single end reads and own genome",
        "tool": "bowtie2-with-index-building.R"
      },
      {
        "name": "Bowtie2 for paired end reads and own genome",
        "tool": "bowtie2-paired-end-with-index-building.R"
      },
      {
        "name": "TopHat2 for paired end reads",
        "tool": "tophat2.R"
      },
      {
        "name": "TopHat2 for single end reads",
        "tool": "tophat2-single-end.R"
      },
      {
        "name": "TopHat2 for paired end reads and own genome",
        "tool": "tophat2-with-index-building.R"
      },
      {
        "name": "TopHat2 for single end reads and own genome",
        "tool": "tophat2-single-end-with-index-building.R"
      },
      {
        "name": "BWA for single end reads",
        "tool": "bwa.R"
      },
      {
        "name": "BWA for paired end reads",
        "tool": "bwa-paired-end.R"
      },
      {
        "name": "BWA for single end reads and own genome",
        "tool": "bwa-with-index-building.R"
      },
      {
        "name": "BWA for paired end reads and own genome",
        "tool": "bwa-paired-end-with-index-building.R"
      },
      {
        "name": "BWA MEM for single end reads",
        "tool": "bwa-mem.R"
      },
      {
        "name": "BWA MEM for paired-end reads",
        "tool": "bwa-mem-paired-end.R"
      },
      {
        "name": "BWA MEM for single end reads and own genome",
        "tool": "bwa-mem-with-index-building.R"
      },
      {
        "name": "BWA MEM for paired-end reads and own genome",
        "tool": "bwa-mem-paired-end-with-index-building.R"
      },
      {
        "name": "Bowtie for single end reads",
        "tool": "bowtie.R"
      },
      {
        "name": "Bowtie for paired end reads",
        "tool": "bowtie-paired-end.R"
      },
      {
        "name": "Bowtie for single end reads and own genome",
        "tool": "bowtie-with-index-building.R"
      },
      {
        "name": "Bowtie for paired end reads and own genome",
        "tool": "bowtie-paired-end-with-index-building.R"
      }
    ],
    "Preprocessing": [
      {
        "name": "Filter reads for several criteria with PRINSEQ",
        "tool": "prinseq-filter.R"
      },
      {
        "name": "Filter reads for adapters, length and Ns with FastX",
        "tool": "fastx-clipper.R"
      },
      {
        "name": "Filter reads for quality with FastX",
        "tool": "fastx-quality-filter.R"
      },
      {
        "name": "Trim reads for several criteria with PRINSEQ",
        "tool": "prinseq-trimmer.R"
      },
      {
        "name": "Trim reads with Trimmomatic",
        "tool": "trimmomatic.R"
      },
      {
        "name": "Trim reads with FastX",
        "tool": "fastx-trimmer.R"
      },
      {
        "name": "Trim primers/adaptors with TagCleaner",
        "tool": "tagcleaner-trim.R"
      },
      {
        "name": "Predict primers/adaptors with TagCleaner",
        "tool": "tagcleaner-predict.R"
      },
      {
        "name": "Statistics for primers/adaptors with TagCleaner",
        "tool": "tagcleaner-statistics.R"
      }
    ],
    "RNA-seq": [
      {
        "name": "Count aligned reads per genes with HTSeq",
        "tool": "htseq-count.R"
      },
      {
        "name": "Count aligned reads per genes with HTSeq using own GTF",
        "tool": "htseq-count-own-gtf.R"
      },
      {
        "name": "Count aligned reads per exons for DEXSeq",
        "tool": "dexseq-exoncount.R"
      },
      {
        "name": "Count aligned reads per exons for DEXSeq using own GTF",
        "tool": "dexseq-exoncount-own-gtf.R"
      },
      {
        "name": "Count reads per transcripts using eXpress",
        "tool": "express.R"
      },
      {
        "name": "Differential expression using DESeq2",
        "tool": "deseq2.R"
      },
      {
        "name": "Differential expression using DESeq",
        "tool": "dea-deseq.R"
      },
      {
        "name": "Differential expression using edgeR",
        "tool": "ngs-dea-edger-RNA.R"
      },
      {
        "name": "Differential expression using edgeR for multivariate experiments",
        "tool": "edgeR-multivariate.R"
      },
      {
        "name": "Differential exon expression using DEXSeq",
        "tool": "DEXSeq.R"
      },
      {
        "name": "Assemble transcripts using Cufflinks",
        "tool": "cufflinks2.R"
      },
      {
        "name": "Merge transcript assemblies with Cuffmerge",
        "tool": "cuffmerge2.R"
      },
      {
        "name": "Compare assembly to reference using Cuffcompare",
        "tool": "cuffcompare2.R"
      },
      {
        "name": "Differential expression using Cuffdiff",
        "tool": "cuffdiff2.R"
      },
      {
        "name": "Hypergeometric test for ConsensusPathDB",
        "tool": "annotate-cpdb.py"
      }
    ],
    "Quality control": [
      {
        "name": "Read quality with FastQC",
        "tool": "fastqc.R"
      },
      {
        "name": "Read quality statistics with FASTX",
        "tool": "fastx-statistics.R"
      },
      {
        "name": "Read quality statistics with PRINSEQ",
        "tool": "prinseq-statistics.R"
      },
      {
        "name": "RNA-seq quality metrics with RseQC",
        "tool": "rseqc.R"
      },
      {
        "name": "PCA and heatmap of samples with DESeq2",
        "tool": "deseq2-pca-heatmap.R"
      }
    ],
    "Matching sets of genomic regions": [
      {
        "name": "Find overlapping regions",
        "tool": "FindOverlappingTool.java"
      },
      {
        "name": "Remove overlapping regions",
        "tool": "RemoveOverlappingTool.java"
      },
      {
        "name": "Combine region files",
        "tool": "CombineRegionsTool.java"
      },
      {
        "name": "Subtract BED",
        "tool": "bedtools-subtractbed.R"
      },
      {
        "name": "Intersect BED",
        "tool": "bedtools-intersectbed.R"
      },
      {
        "name": "Closest BED",
        "tool": "bedtools-closestbed.R"
      },
      {
        "name": "Window BED",
        "tool": "bedtools-windowbed.R"
      },
      {
        "name": "Merge BED",
        "tool": "bedtools-mergebed.R"
      },
      {
        "name": "Coverage BED",
        "tool": "bedtools-coveragebed.R"
      },
      {
        "name": "Genome coverage BED",
        "tool": "bedtools-genomecoveragebed.R"
      },
      {
        "name": "Overlap BED",
        "tool": "bedtools-overlap.R"
      },
      {
        "name": "Increase regions in BED",
        "tool": "bedtools-slopbed.R"
      },
      {
        "name": "Overlap BEDPE with BED",
        "tool": "bedtools-pairtobed.R"
      },
      {
        "name": "Compare two BEDPE files",
        "tool": "bedtools-pairtopair.R"
      }
    ],
    "miRNA-seq": [
      {
        "name": "Convert genomic BAM file to count table",
        "tool": "convert-bam-to-edger.R"
      },
      {
        "name": "Convert miRBased BAM file to count table",
        "tool": "convert-miRBase-bam-to-edger.R"
      },
      {
        "name": "Differential expression using DESeq2",
        "tool": "deseq2.R"
      },
      {
        "name": "Differential expression using DESeq",
        "tool": "dea-deseq.R"
      },
      {
        "name": "Differential expression using edgeR",
        "tool": "ngs-dea-edger-RNA.R"
      },
      {
        "name": "Differential expression using edgeR for multivariate experiments",
        "tool": "edgeR-multivariate.R"
      },
      {
        "name": "Find miRNA targets",
        "tool": "ngs-annotate-miRNA-targets.R"
      },
      {
        "name": "GO enrichment for miRNA targets",
        "tool": "pathways-mirna-hyperg-go.R"
      },
      {
        "name": "KEGG enrichment for miRNA targets",
        "tool": "pathways-mirna-hyperg-kegg.R"
      },
      {
        "name": "Correlate miRNA-seq and RNA-seq data",
        "tool": "miRNA_RNA-seq_integration.R"
      },
      {
        "name": "Correlate miRNA-seq and gene expression array data",
        "tool": "ngs-correlation-analysis-mirna.R"
      },
      {
        "name": "Up-down analysis of miRNA target genes with array data",
        "tool": "ngs-up-down-analysis-mirna.R"
      },
      {
        "name": "Extract gene expression array data for miRNA targets",
        "tool": "ngs-extract-target-gene-expression.R"
      }
    ],
    "CNA-seq": [
      {
        "name": "Define CNA-seq experiment",
        "tool": "cna-define-experiment.R"
      },
      {
        "name": "Filter copy number bins",
        "tool": "cna-filter-bins.R"
      },
      {
        "name": "Correct for GC content and mappability",
        "tool": "cna-correct.R"
      },
      {
        "name": "Normalize copy number data",
        "tool": "cna-normalize.R"
      },
      {
        "name": "Plot copy number profiles",
        "tool": "cna-plot-profile.R"
      },
      {
        "name": "Segment copy number data",
        "tool": "cna-segment.R"
      },
      {
        "name": "Call aberrations from segmented copy number data",
        "tool": "cna-call-aberrations.R"
      },
      {
        "name": "Identify common regions from called copy number data",
        "tool": "acgh-identify-regions.R"
      },
      {
        "name": "Add cytogenetic bands",
        "tool": "acgh-add-cytobands.R"
      },
      {
        "name": "Count overlapping CNVs",
        "tool": "acgh-count-overlapping-cnvs.R"
      },
      {
        "name": "Plot copy number aberration frequencies",
        "tool": "acgh-plot-frequencies.R"
      },
      {
        "name": "Count the number of aberrations per sample",
        "tool": "cna-count-aberrations.R"
      },
      {
        "name": "Cluster called copy number data",
        "tool": "acgh-cluster.R"
      },
      {
        "name": "Plot correlations of called copy number data",
        "tool": "cna-correlate.R"
      },
      {
        "name": "Group tests for called copy number data",
        "tool": "acgh-group-test.R"
      },
      {
        "name": "Survival test for called copy number data",
        "tool": "acgh-survival-test.R"
      },
      {
        "name": "Plot survival curves for called copy number data",
        "tool": "acgh-plot-survival.R"
      },
      {
        "name": "Fuse regions by column value",
        "tool": "cna-fuse-regions-by-column.R"
      },
      {
        "name": "Fuse regions manually",
        "tool": "cna-fuse-regions-manually.R"
      },
      {
        "name": "Detect genes from called copy number data",
        "tool": "acgh-convert-from-probes-to-genes.R"
      },
      {
        "name": "GO enrichment for called gene copy numbers",
        "tool": "acgh-pathways-go.R"
      },
      {
        "name": "Match copy number and expression features",
        "tool": "acgh-match-probes.R"
      },
      {
        "name": "Plot profiles of matched copy number and expression",
        "tool": "acgh-plot-combined-profile.R"
      },
      {
        "name": "Test for copy-number-induced expression changes",
        "tool": "acgh-expression-test.R"
      },
      {
        "name": "Plot copy-number-induced gene expression",
        "tool": "acgh-plot-combined-expression.R"
      }
    ],
    "ChIP, DNase, and Methyl-seq": [
      {
        "name": "Find peaks using MACS2",
        "tool": "macs2.R"
      },
      {
        "name": "Find peaks using MACS, treatment only",
        "tool": "ngs-find-peaks-macs-one.R"
      },
      {
        "name": "Find peaks using MACS, treatment vs. control",
        "tool": "ngs-find-peaks-macs-two.R"
      },
      {
        "name": "Find broad peaks using F-seq",
        "tool": "ngs-find-peaks-fseq.R"
      },
      {
        "name": "Find the nearest genes for regions",
        "tool": "ngs-find-nearest-genes.R"
      },
      {
        "name": "Find unique and annotated genes",
        "tool": "ngs-find-unique-genes.R"
      },
      {
        "name": "GO enrichment for list of genes",
        "tool": "pathways-ngs-hyperg-go.R"
      },
      {
        "name": "Find motifs with GADEM and match to JASPAR",
        "tool": "ngs-find-motifs-jaspar.R"
      },
      {
        "name": "Dimont sequence extractor",
        "tool": "dimont-extract-data.R"
      },
      {
        "name": "Dimont sequence extractor using own genome",
        "tool": "dimont-extract-data-custom.R"
      },
      {
        "name": "Find motifs with Dimont",
        "tool": "dimont.R"
      },
      {
        "name": "DimontPredictor",
        "tool": "dimont-predictor.R"
      },
      {
        "name": "MEDIPS - methylation analysis",
        "tool": "MEDIPS.R"
      }
    ]
  },
  "local": {},
  "misc": {
    "Sequence utilities": [
      {
        "name": "Sequence file summary",
        "tool": "infoseq_summary.R"
      },
      {
        "name": "Display basic information about sequences",
        "tool": "infoseq.R"
      },
      {
        "name": "Select sequences based on descriptions",
        "tool": "textsearch_fasta.R"
      },
      {
        "name": "Merge two sequence sets using logical operators",
        "tool": "seqor.R"
      },
      {
        "name": "Sequence format conversion",
        "tool": "seqret.R"
      },
      {
        "name": "Skip redundant sequences",
        "tool": "skipredundant.R"
      },
      {
        "name": "Extract regions from a sequence",
        "tool": "extractseq.R"
      },
      {
        "name": "Modify sequence name or description",
        "tool": "descseq.R"
      },
      {
        "name": "Replace or delete sequence sections",
        "tool": "biosed.R"
      },
      {
        "name": "Other sequence utilities",
        "tool": "emboss.R"
      }
    ],
    "Utilities": [
      {
        "name": "Get taxonomy information",
        "tool": "taxonomy_tool.R"
      },
      {
        "name": "Simple file operations",
        "tool": "emboss_files.R"
      },
      {
        "name": "Table converter",
        "tool": "select_columns.R"
      },
      {
        "name": "Sort table by column",
        "tool": "sort_and_select_columns.R"
      },
      {
        "name": "Modify text",
        "tool": "general_file_processing.R"
      },
      {
        "name": "Concatenate two files",
        "tool": "concatenate.R"
      },
      {
        "name": "Join tables",
        "tool": "join_tsv_files.R"
      }
    ],
    "Sequence alignment": [
      {
        "name": "Global pairwise sequence alignment",
        "tool": "stretcher.R"
      },
      {
        "name": "Local pairwise sequence alignment",
        "tool": "matcher.R"
      },
      {
        "name": "Multiple sequence alignment with MAFFT",
        "tool": "mafft.R"
      },
      {
        "name": "Compare two similar sequences",
        "tool": "diffseq.R"
      },
      {
        "name": "Threshold dotplot of two sequences",
        "tool": "dotmatcher.R"
      },
      {
        "name": "Dotplots for a sequence set",
        "tool": "polydot.R"
      },
      {
        "name": "Create a consensus sequence",
        "tool": "cons.R"
      },
      {
        "name": "Alignment conservation plot",
        "tool": "plotcon.R"
      },
      {
        "name": "Alignment statistics",
        "tool": "infoalign.R"
      },
      {
        "name": "Display a multiple sequence alignment as formatted text",
        "tool": "showalign.R"
      },
      {
        "name": "Plot out sequence alignment",
        "tool": "prettyplot.R"
      }
    ],
    "Data retrieval": [
      {
        "name": "Retrieve sequences from NCBI",
        "tool": "edirect_fetch.py"
      },
      {
        "name": "Retrieve sequences from NCBI",
        "tool": "edirect_fetch.R"
      },
      {
        "name": "Retrieve reads from SRA database",
        "tool": "srafetch.R"
      },
      {
        "name": "Retrieve read alignments from SRA database",
        "tool": "srabamfetch.R"
      },
      {
        "name": "Retrieve sequences for a given organism in Ensembl",
        "tool": "ensemblfetch.R"
      },
      {
        "name": "Retrieve entries from public databases",
        "tool": "dbfetch.R"
      },
      {
        "name": "Retrieve listed entries from public databases",
        "tool": "dbfetch_list.R"
      },
      {
        "name": "Retrieve sequences from sequence file",
        "tool": "entret_list.R"
      }
    ],
    "Nucleic sequence analysis": [
      {
        "name": "Design PCR primers and hybridization oligos with Primer3",
        "tool": "eprimer.R"
      },
      {
        "name": "Nucleotide pattern search",
        "tool": "fuzznuc.R"
      },
      {
        "name": "Find open reading farmes",
        "tool": "getorf.R"
      },
      {
        "name": "Plot open reading frames",
        "tool": "plotorf.R"
      },
      {
        "name": "Find restriction enzyme cleavage sites",
        "tool": "restrict.R"
      },
      {
        "name": "Display restriction enzyme binding sites",
        "tool": "remap.R"
      },
      {
        "name": "Reverse sequence",
        "tool": "revseq.R"
      },
      {
        "name": "Translate",
        "tool": "transeq.R"
      }
    ],
    "Phylogeny": [
      {
        "name": "Nuleic acid distance algorithm",
        "tool": "fdnadist.R"
      },
      {
        "name": "DNA parsimony algorithm",
        "tool": "fdnapars.R"
      },
      {
        "name": "Protein distance algorithm",
        "tool": "fprotdist.R"
      },
      {
        "name": "Protein parsimony algorithm",
        "tool": "fprotpars.R"
      },
      {
        "name": "Phylogenies from distance matrix by N-J or UPGMA method",
        "tool": "fneighbor.R"
      },
      {
        "name": "Plot an unrooted tree",
        "tool": "fdrawtree.R"
      },
      {
        "name": "Plot a cladogram",
        "tool": "fdrawgram.R"
      },
      {
        "name": "Estimate nucleotide phylogeny by maximum likelihood",
        "tool": "fdnaml.R"
      }
    ],
    "BLAST": [
      {
        "name": "Nucleotide BLAST",
        "tool": "ncbi_blastn.R"
      },
      {
        "name": "Nucleotide BLAST against users own nucleotide sequence set",
        "tool": "my_blastn.R"
      },
      {
        "name": "Nucleotide BLAST against the genome or transcriptome of a given species in Ensembl",
        "tool": "ensembl_blastn.R"
      },
      {
        "name": "Protein BLAST",
        "tool": "ncbi_blastp.R"
      },
      {
        "name": "Protein BLAST against users own protein sequence set",
        "tool": "my_blastp.R"
      },
      {
        "name": "Protein BLAST against the proteome of a given species in Ensembl",
        "tool": "ensembl_blastp.R"
      },
      {
        "name": "Translated nucleotide BLAST",
        "tool": "ncbi_blastx.R"
      },
      {
        "name": "Translated nucleotide BLAST against users own protein sequcense set.",
        "tool": "my_blastx.R"
      },
      {
        "name": "Translated nucleotide BLAST against the proteome of a given species in Ensembl.",
        "tool": "ensembl_blastx.R"
      },
      {
        "name": "Translated protein BLAST ",
        "tool": "ncbi_tblastn.R"
      },
      {
        "name": "Translated protein BLAST against users of nucleotide sequence set",
        "tool": "my_tblastn.R"
      },
      {
        "name": "Translated protein BLAST against genome or transcriptome of a given species in Ensembl",
        "tool": "ensembl_tblastn.R"
      }
    ],
    "Protein sequence analysis": [
      {
        "name": "Filter protein sequence sets",
        "tool": "protfilter.R"
      },
      {
        "name": "Protein pattern search",
        "tool": "fuzzpro.R"
      }
    ]
  }
}